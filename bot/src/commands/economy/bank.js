const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require('discord.js');
const BankAccount = require('../../models/BankAccount');
const Coins = require('../../models/Coins');

const BANK_HELP_PAGES = [
  {
    title: 'üè¶ Sunatia Bank - Page 1',
    description: `
**Commandes :**
‚Ä¢ /bank create <nom> <type> - Cr√©er un compte bancaire.
‚Ä¢ /bank display - Afficher vos comptes.
‚Ä¢ /bank deposit <montant> - D√©poser de l'argent.
‚Ä¢ /bank withdraw <montant> - Retirer de l'argent.
‚Ä¢ /bank transfer <iban> <montant> - Transf√©rer de l'argent.
‚Ä¢ /bank list - Lister tous les comptes du serveur.
‚Ä¢ /bank help - Afficher cette aide.
    `,
  },
  {
    title: 'üí∞ Types de comptes - Page 2',
    description: `
**courant**
- Acc√®s facile, peu ou pas d'int√©r√™ts
- Frais faibles

**√©pargne**
- Int√©r√™ts plus √©lev√©s
- Frais de retrait plus importants

**investissement**
- Rendement al√©atoire plus √©lev√©
- Risque plus important
    `,
  },
  {
    title: 'üí≥ Transferts & IBAN - Page 3',
    description: `
- Chaque compte poss√®de un IBAN unique (ex: FR123456...)
- Vous pouvez transf√©rer de l'argent √† un autre compte en utilisant son IBAN
- Pour recevoir un virement, communiquez simplement votre IBAN
    `,
  },
  {
    title: 'üí∏ Int√©r√™ts & frais - Page 4',
    description: `
- Les comptes √âpargne et Investissement g√©n√®rent des int√©r√™ts p√©riodiques
- Des frais peuvent √™tre appliqu√©s chaque mois
- Les int√©r√™ts et frais sont calcul√©s automatiquement par le cron job
- Exemple :
  ‚Ä¢ √©pargne : +2% / mois, frais 1%
  ‚Ä¢ courant : +0%, frais 0.5%
  ‚Ä¢ investissement : +0-5% al√©atoire, frais 2%
    `,
  },
];

const helpCache = new Map();

module.exports = {
  data: new SlashCommandBuilder()
    .setName('bank')
    .setDescription('Gestion des comptes bancaires')
    .addSubcommand((sub) =>
      sub
        .setName('create')
        .setDescription('Cr√©er un compte bancaire')
        .addStringOption((opt) =>
          opt.setName('name').setDescription('Nom du compte').setRequired(true)
        )
        .addStringOption((opt) =>
          opt
            .setName('type')
            .setDescription('Type de compte')
            .setRequired(true)
            .addChoices(
              { name: 'courant', value: 'courant' },
              { name: '√©pargne', value: '√©pargne' },
              { name: 'investissement', value: 'investissement' }
            )
        )
    )
    .addSubcommand((sub) => sub.setName('display').setDescription('Afficher vos comptes bancaires'))
    .addSubcommand((sub) =>
      sub
        .setName('deposit')
        .setDescription('D√©poser de l‚Äôargent dans un compte')
        .addStringOption((opt) =>
          opt.setName('name').setDescription('Nom du compte').setRequired(true)
        )
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant').setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName('withdraw')
        .setDescription('Retirer de l‚Äôargent d‚Äôun compte')
        .addStringOption((opt) =>
          opt.setName('name').setDescription('Nom du compte').setRequired(true)
        )
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant').setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName('transfer')
        .setDescription('Transf√©rer de l‚Äôargent vers un autre compte via IBAN')
        .addStringOption((opt) =>
          opt.setName('iban').setDescription('IBAN du destinataire').setRequired(true)
        )
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant √† transf√©rer').setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub.setName('list').setDescription('Lister tous les comptes du serveur')
    )
    .addSubcommand((sub) => sub.setName('help').setDescription('Afficher l‚Äôaide bancaire')),

  async execute(interaction) {
    await interaction.deferReply({ flags: 1 << 6 });
    const sub = interaction.options.getSubcommand();
    const userId = interaction.user.id;
    const guildId = interaction.guild.id;

    try {
      // ------------------- BANK CREATE -------------------
      if (sub === 'create') {
        const name = interaction.options.getString('name');
        const type = interaction.options.getString('type');

        const existing = await BankAccount.findOne({ guildId, name });
        if (existing) {
          if (existing.userId === userId)
            return interaction.editReply({
              content: '‚ö†Ô∏è Vous avez d√©j√† cr√©√© ce compte bancaire.',
            });
          return interaction.editReply({ content: '‚ùå Ce nom de compte est d√©j√† pris.' });
        }

        const account = await BankAccount.create({ userId, guildId, name, type });
        return interaction.editReply({
          content: `‚úÖ Compte **${name}** (${type}) cr√©√© avec succ√®s ! IBAN: \`${account.iban}\``,
        });
      }

      // ------------------- BANK DISPLAY -------------------
      if (sub === 'display') {
        const accounts = await BankAccount.find({ userId, guildId });
        if (!accounts.length)
          return interaction.editReply({ content: '‚ùå Vous n‚Äôavez aucun compte.' });

        const embed = new EmbedBuilder()
          .setTitle('üè¶ Vos comptes bancaires')
          .setColor('#00BFFF')
          .setDescription(
            accounts
              .map(
                (acc) =>
                  `‚Ä¢ **${acc.name}** (${acc.type}) - üí∞ ${acc.balance.toLocaleString()} ‚Ä¢ IBAN: \`${acc.iban}\``
              )
              .join('\n')
          )
          .setTimestamp();

        return interaction.editReply({ embeds: [embed] });
      }

      // ------------------- BANK DEPOSIT -------------------
      if (sub === 'deposit') {
        const name = interaction.options.getString('name');
        const amount = interaction.options.getInteger('amount');

        if (amount <= 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre sup√©rieur √† 0.' });

        const account = await BankAccount.findOne({ userId, guildId, name });
        if (!account) return interaction.editReply({ content: '‚ùå Compte introuvable.' });

        const coins = await Coins.findOrCreate({ userId, guildId });
        if (coins.balance < amount)
          return interaction.editReply({
            content: '‚ùå Vous n‚Äôavez pas assez de pi√®ces pour ce d√©p√¥t.',
          });

        account.balance += amount;
        account.totalDeposited += amount;
        await account.save();

        await coins.addCoins(-amount); // retirer les coins

        return interaction.editReply({
          content: `‚úÖ Vous avez d√©pos√© ${amount.toLocaleString()} dans **${name}**. Nouveau solde: ${account.balance.toLocaleString()}`,
        });
      }

      // ------------------- BANK WITHDRAW -------------------
      if (sub === 'withdraw') {
        const name = interaction.options.getString('name');
        const amount = interaction.options.getInteger('amount');

        if (amount <= 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre sup√©rieur √† 0.' });

        const account = await BankAccount.findOne({ userId, guildId, name });
        if (!account) return interaction.editReply({ content: '‚ùå Compte introuvable.' });

        if (account.balance < amount)
          return interaction.editReply({ content: '‚ùå Solde insuffisant sur le compte bancaire.' });

        const coins = await Coins.findOrCreate({ userId, guildId });

        account.balance -= amount;
        await account.save();

        await coins.addCoins(amount); // ajouter les coins

        return interaction.editReply({
          content: `‚úÖ Vous avez retir√© ${amount.toLocaleString()} de **${name}**. Nouveau solde Coins: ${coins.balance.toLocaleString()}`,
        });
      }

      // ------------------- BANK TRANSFER -------------------
      if (sub === 'transfer') {
        const iban = interaction.options.getString('iban').toUpperCase();
        const amount = interaction.options.getInteger('amount');

        if (amount <= 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre sup√©rieur √† 0.' });

        const sender = await BankAccount.findOne({ userId, guildId, balance: { $gte: amount } });
        if (!sender)
          return interaction.editReply({ content: '‚ùå Solde insuffisant sur le compte.' });

        const receiver = await BankAccount.findOne({ iban });
        if (!receiver) return interaction.editReply({ content: '‚ùå IBAN introuvable.' });

        sender.balance -= amount;
        receiver.balance += amount;

        await sender.save();
        await receiver.save();

        return interaction.editReply({
          content: `‚úÖ Transfert de ${amount.toLocaleString()} de **${sender.name}** vers **${receiver.name}** r√©ussi !`,
        });
      }

      // ------------------- BANK LIST -------------------
      if (sub === 'list') {
        const accounts = await BankAccount.find({ guildId });
        if (!accounts.length)
          return interaction.editReply({ content: '‚ùå Aucun compte trouv√© sur ce serveur.' });

        const embed = new EmbedBuilder()
          .setTitle('üè¶ Comptes du serveur')
          .setColor('#00BFFF')
          .setDescription(
            accounts
              .map(
                (acc) =>
                  `‚Ä¢ **${acc.name}** (${acc.type}) - üí∞ ${acc.balance.toLocaleString()} ‚Ä¢ IBAN: \`${acc.iban}\``
              )
              .join('\n')
          )
          .setTimestamp();

        return interaction.editReply({ embeds: [embed] });
      }

      // ------------------- BANK HELP -------------------
      if (sub === 'help') {
        let page = 0;

        const generateEmbed = (pageIndex) => {
          const pageData = BANK_HELP_PAGES[pageIndex];
          return new EmbedBuilder()
            .setTitle(pageData.title)
            .setDescription(pageData.description)
            .setColor('#00BFFF')
            .setFooter({ text: `Page ${pageIndex + 1}/${BANK_HELP_PAGES.length}` })
            .setTimestamp();
        };

        const generateButtons = (pageIndex) => {
          return new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId('help_prev')
              .setLabel('‚óÄÔ∏è Pr√©c√©dent')
              .setStyle(ButtonStyle.Primary)
              .setDisabled(pageIndex === 0),
            new ButtonBuilder()
              .setCustomId('help_next')
              .setLabel('Suivant ‚ñ∂Ô∏è')
              .setStyle(ButtonStyle.Primary)
              .setDisabled(pageIndex === BANK_HELP_PAGES.length - 1)
          );
        };

        const message = await interaction.editReply({
          embeds: [generateEmbed(page)],
          components: [generateButtons(page)],
        });

        helpCache.set(interaction.user.id, { messageId: message.id, page });
        return;
      }
    } catch (err) {
      console.error('‚ùå Erreur commande bank:', err);
      return interaction.editReply({ content: '‚ùå Une erreur est survenue.' });
    }
  },

  async handleButton(interaction) {
    if (!interaction.isButton()) return;
    if (!helpCache.has(interaction.user.id)) return;

    const state = helpCache.get(interaction.user.id);
    if (interaction.message.id !== state.messageId) return;

    const BANK_HELP_PAGES_COUNT = BANK_HELP_PAGES.length;

    if (interaction.customId === 'help_prev') state.page = Math.max(0, state.page - 1);
    if (interaction.customId === 'help_next')
      state.page = Math.min(BANK_HELP_PAGES_COUNT - 1, state.page + 1);

    const generateEmbed = (pageIndex) => {
      const pageData = BANK_HELP_PAGES[pageIndex];
      return new EmbedBuilder()
        .setTitle(pageData.title)
        .setDescription(pageData.description)
        .setColor('#00BFFF')
        .setFooter({ text: `Page ${pageIndex + 1}/${BANK_HELP_PAGES_COUNT}` })
        .setTimestamp();
    };

    const generateButtons = (pageIndex) => {
      return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('help_prev')
          .setLabel('‚óÄÔ∏è Pr√©c√©dent')
          .setStyle(ButtonStyle.Primary)
          .setDisabled(pageIndex === 0),
        new ButtonBuilder()
          .setCustomId('help_next')
          .setLabel('Suivant ‚ñ∂Ô∏è')
          .setStyle(ButtonStyle.Primary)
          .setDisabled(pageIndex === BANK_HELP_PAGES_COUNT - 1)
      );
    };

    await interaction.update({
      embeds: [generateEmbed(state.page)],
      components: [generateButtons(state.page)],
    });

    helpCache.set(interaction.user.id, state);
  },
};
