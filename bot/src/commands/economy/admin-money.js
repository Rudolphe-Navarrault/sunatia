const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const Coins = require('../../models/Coins');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('admin-money')
    .setDescription('G√©rer l‚Äôargent d‚Äôun utilisateur (admin only)')
    .addSubcommand((sub) =>
      sub
        .setName('give')
        .setDescription('Donne de l‚Äôargent √† un utilisateur')
        .addUserOption((opt) => opt.setName('user').setDescription('Utilisateur').setRequired(true))
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant').setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName('take')
        .setDescription('Retire de l‚Äôargent √† un utilisateur')
        .addUserOption((opt) => opt.setName('user').setDescription('Utilisateur').setRequired(true))
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant').setRequired(true)
        )
    )
    .addSubcommand((sub) =>
      sub
        .setName('reset')
        .setDescription('Remet le solde de l‚Äôutilisateur √† 0')
        .addUserOption((opt) => opt.setName('user').setDescription('Utilisateur').setRequired(true))
    )
    .addSubcommand((sub) =>
      sub
        .setName('set')
        .setDescription('D√©finir le solde exact d‚Äôun utilisateur')
        .addUserOption((opt) => opt.setName('user').setDescription('Utilisateur').setRequired(true))
        .addIntegerOption((opt) =>
          opt.setName('amount').setDescription('Montant √† d√©finir').setRequired(true)
        )
    ),

  async execute(interaction) {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({
        content: '‚ùå Vous n‚Äôavez pas la permission d‚Äôutiliser cette commande.',
        flags: MessageFlags.Ephemeral,
      });
    }

    const sub = interaction.options.getSubcommand();
    const target = interaction.options.getUser('user');

    try {
      await interaction.deferReply({ flags: MessageFlags.Ephemeral });

      // R√©cup√©rer ou cr√©er le compte
      let user = await Coins.findOrCreate({ userId: target.id, guildId: interaction.guild.id });

      let embed = new EmbedBuilder().setTimestamp();

      if (sub === 'give') {
        const amount = interaction.options.getInteger('amount');
        if (amount <= 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre sup√©rieur √† 0.' });

        user.balance += amount;
        user.totalEarned += amount;
        await user.save();

        embed
          .setColor('#57F287')
          .setTitle('üí∞ Argent donn√©')
          .setDescription(
            `${amount.toLocaleString()} pi√®ces ont √©t√© ajout√©es √† ${target.username}.`
          )
          .addFields(
            { name: 'üí∞ Nouveau solde', value: `${user.balance.toLocaleString()} pi√®ces` },
            { name: '‚ú® Total gagn√©', value: `${user.totalEarned.toLocaleString()} pi√®ces` }
          );
      } else if (sub === 'take') {
        const amount = interaction.options.getInteger('amount');
        if (amount <= 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre sup√©rieur √† 0.' });

        user.balance = Math.max(0, user.balance - amount);
        await user.save();

        embed
          .setColor('#FF0000')
          .setTitle('üí∏ Argent retir√©')
          .setDescription(
            `${amount.toLocaleString()} pi√®ces ont √©t√© retir√©es √† ${target.username}.`
          )
          .addFields({
            name: 'üí∞ Nouveau solde',
            value: `${user.balance.toLocaleString()} pi√®ces`,
          });
      } else if (sub === 'reset') {
        user.balance = 0;
        await user.save();

        embed
          .setColor('#FFA500')
          .setTitle('‚ôªÔ∏è Solde r√©initialis√©')
          .setDescription(`Le solde de ${target.username} a √©t√© remis √† 0.`)
          .addFields({
            name: 'üí∞ Nouveau solde',
            value: `${user.balance.toLocaleString()} pi√®ces`,
          });
      } else if (sub === 'set') {
        const amount = interaction.options.getInteger('amount');
        if (amount < 0)
          return interaction.editReply({ content: '‚ùå Le montant doit √™tre positif.' });

        user.balance = amount;
        await user.save();

        embed
          .setColor('#1E90FF')
          .setTitle('üõ†Ô∏è Solde d√©fini')
          .setDescription(
            `Le solde de ${target.username} a √©t√© d√©fini √† ${amount.toLocaleString()} pi√®ces.`
          )
          .addFields({
            name: 'üí∞ Nouveau solde',
            value: `${user.balance.toLocaleString()} pi√®ces`,
          });
      }

      return interaction.editReply({ embeds: [embed] });
    } catch (error) {
      console.error('‚ùå Erreur admin-money:', error);
      return interaction.editReply({ content: '‚ùå Une erreur est survenue.' });
    }
  },
};
