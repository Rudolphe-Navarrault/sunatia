const { ChannelType, PermissionFlagsBits, Client } = require('discord.js');
const mongoose = require('mongoose');
const { GuildSettings } = require('../../models/GuildSettings');

// R√©f√©rence au client Discord
let client;

// Fonction pour d√©finir le client
const setClient = (discordClient) => {
  client = discordClient;
};

exports.setClient = setClient;

// Stockage en m√©moire pour les salons de statistiques
const statsChannels = new Map();

// Mettre √† jour le compteur de membres
async function updateMemberCount(guild) {
  try {
    console.log(`üîç Tentative de mise √† jour du compteur pour le serveur: ${guild.name} (${guild.id})`);
    
    // V√©rifier d'abord dans le cache
    let channelId = statsChannels.get(guild.id);
    
    // Si pas dans le cache, v√©rifier dans GuildSettings
    if (!channelId) {
      console.log('‚ÑπÔ∏è Salon non trouv√© dans le cache, v√©rification dans GuildSettings...');
      const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
      if (guildSettings?.statsChannelId) {
        channelId = guildSettings.statsChannelId;
        statsChannels.set(guild.id, channelId); // Mettre en cache
      } else {
        console.log(`‚ùå Aucun salon de statistiques trouv√© pour le serveur: ${guild.name}`);
        return;
      }
    }
    
    console.log(`‚úÖ Salon de statistiques trouv√©: ${channelId}`);

    // R√©cup√©rer le salon
    let channel = guild.channels.cache.get(channelId);
    
    // Si le salon n'est pas dans le cache, essayer de le r√©cup√©rer
    if (!channel) {
      try {
        console.log(`‚ÑπÔ∏è Salon ${channelId} non trouv√© dans le cache, tentative de r√©cup√©ration...`);
        channel = await guild.channels.fetch(channelId);
      } catch (fetchError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration du salon:', fetchError);
      }
    }
    
    // Si le salon n'existe toujours pas, nettoyer
    if (!channel) {
      console.log(`‚ùå Le salon ${channelId} n'existe plus, nettoyage...`);
      statsChannels.delete(guild.id);
      await GuildSettings.updateOne(
        { guildId: guild.id },
        { $set: { statsChannelId: null } }
      );
      return;
    }

    // Compter les membres non-bots
    let memberCount;
    try {
      // Forcer un rafra√Æchissement du cache des membres si n√©cessaire
      if (guild.members.cache.size < guild.memberCount) {
        console.log('üîÑ Rafra√Æchissement du cache des membres...');
        await guild.members.fetch();
      }
      
      // Compter les membres non-bots
      memberCount = guild.members.cache.filter(member => !member.user.bot).size;
      console.log(`üë• Membres non-bots: ${memberCount}/${guild.memberCount}`);
      
    } catch (err) {
      console.error('‚ö†Ô∏è Erreur lors du comptage des membres:', err);
      memberCount = guild.memberCount; // Utiliser le compte total en cas d'erreur
    }

    // Mettre √† jour le nom du salon si n√©cessaire
    const newName = `üë• Membres: ${memberCount}`;
    if (channel.name !== newName) {
      console.log(`üîÑ Mise √† jour du nom: "${channel.name}" ‚Üí "${newName}"`);
      try {
        await channel.setName(newName, 'Mise √† jour du nombre de membres');
        console.log('‚úÖ Nom du salon mis √† jour avec succ√®s!');
      } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour du nom:', err);
        if (err.code === 50013) {
          console.log('‚ö†Ô∏è Permission refus√©e pour modifier le salon. V√©rifiez les permissions du bot.');
        } else if (err.code === 30034) {
          console.log('‚ö†Ô∏è Trop de requ√™tes. R√©essayez plus tard.');
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Le nom du salon est d√©j√† √† jour');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du compteur de membres:', error);
  }
}

// Exports
exports.statsChannels = statsChannels;
exports.updateMemberCount = updateMemberCount;

// Charger les salons depuis GuildSettings
exports.initializeStatsChannels = async function() {
  try {
    // Charger depuis GuildSettings
    const guildsWithStats = await GuildSettings.find({ statsChannelId: { $ne: null } });
    
    // Mettre √† jour le cache en m√©moire
    guildsWithStats.forEach(guild => {
      if (guild.statsChannelId) {
        statsChannels.set(guild.guildId, guild.statsChannelId);
      }
    });
    
    console.log(`‚úÖ ${guildsWithStats.length} salon(s) de statistiques charg√©(s) depuis GuildSettings`);
    
    // V√©rifier que les salons existent bien
    for (const [guildId, channelId] of statsChannels.entries()) {
      try {
        const guild = client.guilds.cache.get(guildId);
        if (guild) {
          const channel = guild.channels.cache.get(channelId);
          if (!channel) {
            console.log(`‚ö†Ô∏è Le salon ${channelId} n'existe plus sur le serveur ${guild.name}, suppression du cache...`);
            // Mettre √† jour GuildSettings pour refl√©ter que le salon n'existe plus
            await GuildSettings.updateOne(
              { guildId },
              { $set: { statsChannelId: null } }
            );
            statsChannels.delete(guildId);
          }
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la v√©rification du salon ${channelId} du serveur ${guildId}:`, error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement des salons de statistiques:', error);
  }
};

// Cr√©er un nouveau salon de statistiques
exports.createStatsChannel = async function(guild, channelName = `üë• Membres: ${guild.memberCount}`) {
  try {
    console.log(`üîç V√©rification d'un salon existant pour le serveur: ${guild.name} (${guild.id})`);
    
    // V√©rifier si un salon existe d√©j√† dans le cache
    const existingChannelId = statsChannels.get(guild.id);
    if (existingChannelId) {
      const existingChannel = guild.channels.cache.get(existingChannelId);
      if (existingChannel) {
        console.log(`‚ÑπÔ∏è Salon existant trouv√© dans le cache: ${existingChannel.name} (${existingChannel.id})`);
        return { 
          success: false, 
          message: `Un salon de statistiques existe d√©j√† : ${existingChannel}` 
        };
      } else {
        // Nettoyer le cache si le salon n'existe plus
        statsChannels.delete(guild.id);
      }
    }

    // V√©rifier dans GuildSettings
    const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
    if (guildSettings?.statsChannelId) {
      const channel = guild.channels.cache.get(guildSettings.statsChannelId);
      if (channel) {
        console.log(`‚ÑπÔ∏è Salon existant trouv√© dans GuildSettings: ${channel.name} (${channel.id})`);
        statsChannels.set(guild.id, channel.id);
        return { 
          success: false, 
          message: `Un salon de statistiques existe d√©j√† : ${channel}` 
        };
      } else {
        // Mettre √† jour GuildSettings si le salon n'existe plus
        await GuildSettings.updateOne(
          { guildId: guild.id },
          { $set: { statsChannelId: null } }
        );
      }
    }

    // V√©rifier les permissions
    const me = await guild.members.fetchMe();
    if (!me.permissions.has(PermissionFlagsBits.ManageChannels)) {
      console.log('‚ùå Permission refus√©e: G√©rer les salons');
      return { 
        success: false, 
        message: 'Je n\'ai pas la permission de g√©rer les salons sur ce serveur.' 
      };
    }

    // Cr√©er le salon vocal
    console.log(`üîÑ Cr√©ation du salon de statistiques pour ${guild.name}...`);
    const channel = await guild.channels.create({
      name: channelName,
      type: ChannelType.GuildVoice,
      permissionOverwrites: [
        {
          id: guild.roles.everyone.id,
          deny: [PermissionFlagsBits.Connect],
        },
      ],
      reason: 'Cr√©ation du salon de statistiques des membres',
    });

    // Mettre √† jour GuildSettings
    await GuildSettings.findOneAndUpdate(
      { guildId: guild.id },
      { $set: { statsChannelId: channel.id } },
      { upsert: true, new: true }
    );

    // Mettre √† jour le cache
    statsChannels.set(guild.id, channel.id);
    console.log(`üîÑ Cache mis √† jour pour le serveur: ${guild.id}`);

    return { 
      success: true, 
      message: `‚úÖ Salon de statistiques cr√©√© : ${channel}`,
      channel 
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du salon de statistiques:', error);
    return { 
      success: false, 
      message: 'Une erreur est survenue lors de la cr√©ation du salon de statistiques.'
    };
  }
};

// Supprimer le salon de statistiques
exports.deleteStatsChannel = async function(guild) {
  try {
    console.log(`üîç Tentative de suppression du salon de statistiques pour le serveur: ${guild.name} (${guild.id})`);
    
    // V√©rifier si un salon existe dans le cache
    const channelId = statsChannels.get(guild.id);
    if (!channelId) {
      console.log('‚ÑπÔ∏è Aucun salon de statistiques trouv√© dans le cache pour ce serveur');
      
      // V√©rifier dans GuildSettings au cas o√π
      const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
      if (!guildSettings?.statsChannelId) {
        return { 
          success: false, 
          message: 'Aucun salon de statistiques trouv√© pour ce serveur.' 
        };
      }
      
      // Mettre √† jour le cache avec la valeur de GuildSettings
      statsChannels.set(guild.id, guildSettings.statsChannelId);
    }

    // Supprimer le salon s'il existe
    const channel = guild.channels.cache.get(channelId);
    if (channel) {
      try {
        await channel.delete('Suppression du salon de statistiques');
        console.log(`‚úÖ Salon de statistiques supprim√©: ${channel.name} (${channel.id})`);
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression du salon:', error);
        if (error.code === 50013) {
          return { 
            success: false, 
            message: 'Je n\'ai pas la permission de supprimer ce salon.' 
          };
        }
        throw error;
      }
    }

    // Mettre √† jour GuildSettings
    await GuildSettings.updateOne(
      { guildId: guild.id },
      { $set: { statsChannelId: null } }
    );
    
    // Supprimer du cache
    statsChannels.delete(guild.id);

    return { 
      success: true, 
      message: 'Le salon de statistiques a √©t√© supprim√© avec succ√®s.' 
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du salon de statistiques:', error);
    return { 
      success: false, 
      message: 'Une erreur est survenue lors de la suppression du salon de statistiques.'
    };
  }
};
