const { ChannelType, PermissionFlagsBits, Client } = require('discord.js');
const mongoose = require('mongoose');
const { GuildSettings } = require('../models/GuildSettings');

// R√©f√©rence au client Discord
let client;

// Fonction pour d√©finir le client
const setClient = (discordClient) => {
  client = discordClient;
};

exports.setClient = setClient;

// Stockage en m√©moire pour les salons de statistiques
const statsChannels = new Map();

// Mettre √† jour le compteur de membres
async function updateMemberCount(guild) {
  const logger = console;
  logger.log('\n' + '='.repeat(80));
  logger.log(`[${new Date().toISOString()}] üîÑ D√âBUT updateMemberCount`);
  logger.log(`üè† Serveur: ${guild.name} (${guild.id})`);
  
  try {
    // 1. V√©rifier si le bot a les permissions n√©cessaires
    const me = await guild.members.fetchMe();
    if (!me.permissions.has(PermissionFlagsBits.ManageChannels)) {
      logger.error('‚ùå Le bot n\'a pas la permission de g√©rer les salons');
      return;
    }

    // 2. R√©cup√©rer l'ID du salon depuis le cache ou la base de donn√©es
    let channelId = statsChannels.get(guild.id);
    if (!channelId) {
      logger.log('‚ÑπÔ∏è Salon non trouv√© dans le cache, v√©rification dans la base de donn√©es...');
      const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
      if (guildSettings?.statsChannelId) {
        channelId = guildSettings.statsChannelId;
        statsChannels.set(guild.id, channelId);
        logger.log(`‚úÖ Salon charg√© depuis la base de donn√©es: ${channelId}`);
      } else {
        logger.log('‚ÑπÔ∏è Aucun salon de statistiques configur√© pour ce serveur');
        return;
      }
    }

    // 3. R√©cup√©rer le salon
    let channel;
    try {
      channel = guild.channels.cache.get(channelId) || await guild.channels.fetch(channelId);
      if (!channel) throw new Error('Salon non trouv√©');
      logger.log(`‚úÖ Salon trouv√©: #${channel.name} (${channel.id})`);
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la r√©cup√©ration du salon ${channelId}:`, error);
      // Nettoyer le cache si le salon n'existe plus
      statsChannels.delete(guild.id);
      await GuildSettings.updateOne(
        { guildId: guild.id },
        { $set: { statsChannelId: null } }
      );
      return;
    }

    // 4. Obtenir le nombre total de membres (y compris les bots)
    let memberCount;
    try {
      // Utiliser directement memberCount pour √©viter les appels API inutiles
      memberCount = guild.memberCount;
      logger.log(`üë• Nombre total de membres: ${memberCount}`);
    } catch (error) {
      logger.error('‚ö†Ô∏è Erreur lors du comptage des membres:', error);
      memberCount = guild.memberCount; // Utiliser le compte total en cas d'erreur
    }

    // 5. Mettre √† jour le nom du salon
    const newName = `üë• Membres: ${memberCount}`;
    
    // V√©rifier si une mise √† jour est n√©cessaire
    if (channel.name === newName) {
      logger.log('‚ÑπÔ∏è Le nom du salon est d√©j√† √† jour');
      return;
    }

    logger.log(`üîÑ Mise √† jour du nom: "${channel.name}" ‚Üí "${newName}"`);
    
    try {
      // V√©rifier si le canal est toujours valide avant de le mettre √† jour
      if (!channel.deleted) {
        await channel.setName(newName, `Mise √† jour du nombre de membres (${new Date().toISOString()})`);
        logger.log('‚úÖ Nom du salon mis √† jour avec succ√®s');
      } else {
        logger.error('‚ùå Impossible de mettre √† jour le salon: le canal a √©t√© supprim√©');
        // Nettoyer le cache et la base de donn√©es
        statsChannels.delete(guild.id);
        await GuildSettings.updateOne(
          { guildId: guild.id },
          { $set: { statsChannelId: null } }
        );
      }
    } catch (error) {
      logger.error('‚ùå Erreur lors de la mise √† jour du nom:', {
        code: error.code,
        message: error.message,
        permissions: channel?.permissionsFor(me)?.toArray() || 'Impossible de r√©cup√©rer les permissions'
      });
      
      // Nettoyer le cache si le salon n'existe plus ou si le bot n'a plus acc√®s
      if (['Unknown Channel', 'Missing Access', 'Missing Permissions', 'Unknown Message'].includes(error.message)) {
        logger.log('‚ö†Ô∏è Suppression du salon du cache');
        statsChannels.delete(guild.id);
        await GuildSettings.updateOne(
          { guildId: guild.id },
          { $set: { statsChannelId: null } }
        );
      }
    }
  } catch (error) {
    logger.error('‚ùå Erreur critique dans updateMemberCount:', error);
  } finally {
    logger.log(`‚úÖ FIN updateMemberCount pour le serveur: ${guild.name} (${guild.id})`);
  }
}

// Exports
exports.statsChannels = statsChannels;
exports.updateMemberCount = updateMemberCount;

// Charger les salons depuis GuildSettings
exports.initializeStatsChannels = async function() {
  try {
    if (!client) {
      console.error('‚ùå Client Discord non initialis√© dans stats-vocal.js');
      return;
    }

    console.log('üîÑ Chargement des salons de statistiques depuis GuildSettings...');
    
    // Charger depuis GuildSettings
    const guildsWithStats = await GuildSettings.find({ statsChannelId: { $ne: null } });
    
    console.log(`üîç ${guildsWithStats.length} serveur(s) avec des salons de statistiques trouv√©s`);
    
    // Mettre √† jour le cache en m√©moire
    for (const guildSettings of guildsWithStats) {
      if (guildSettings.statsChannelId) {
        statsChannels.set(guildSettings.guildId, guildSettings.statsChannelId);
        console.log(`üìå Salon de stats enregistr√© pour le serveur ${guildSettings.guildId}: ${guildSettings.statsChannelId}`);
      }
    }
    
    // V√©rifier que les salons existent bien
    for (const [guildId, channelId] of statsChannels.entries()) {
      try {
        const guild = client.guilds.cache.get(guildId);
        if (guild) {
          // Essayer de r√©cup√©rer le salon
          let channel;
          try {
            channel = await guild.channels.fetch(channelId);
          } catch (error) {
            console.log(`‚ö†Ô∏è Erreur lors de la r√©cup√©ration du salon ${channelId}:`, error.message);
            channel = null;
          }
          
          if (!channel) {
            console.log(`‚ùå Le salon ${channelId} n'existe plus sur le serveur ${guild.name}, nettoyage...`);
            // Mettre √† jour GuildSettings
            await GuildSettings.updateOne(
              { guildId },
              { $set: { statsChannelId: null } }
            );
            statsChannels.delete(guildId);
          } else {
            console.log(`‚úÖ Salon de statistiques v√©rifi√©: #${channel.name} (${channel.id}) sur ${guild.name}`);
            // Mettre √† jour le compteur imm√©diatement
            await updateMemberCount(guild);
          }
        } else {
          console.log(`‚ö†Ô∏è Serveur ${guildId} non trouv√© dans le cache du client`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors de la v√©rification du salon ${channelId} du serveur ${guildId}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement des salons de statistiques:', error);
  }
};

// Cr√©er un nouveau salon de statistiques
exports.createStatsChannel = async function(guild, channelName = `üë• Membres: ${guild.memberCount}`) {
  const logger = console;
  logger.log(`\n${'='.repeat(80)}`);
  logger.log(`[${new Date().toISOString()}] üîç V√âRIFICATION DES SALONS EXISTANTS`);
  logger.log(`üè† Serveur: ${guild.name} (${guild.id})`);
  
  try {
    // 1. V√©rifier les permissions
    const me = await guild.members.fetchMe();
    if (!me.permissions.has(PermissionFlagsBits.ManageChannels)) {
      const errorMsg = '‚ùå Je n\'ai pas la permission de g√©rer les salons sur ce serveur.';
      logger.log(errorMsg);
      return { 
        success: false, 
        message: errorMsg
      };
    }

    // 2. V√©rifier s'il existe d√©j√† un salon de statistiques
    logger.log('\nüîç V√©rification des salons existants...');
    
    // V√©rifier d'abord dans le cache
    const cachedChannelId = statsChannels.get(guild.id);
    if (cachedChannelId) {
      try {
        const cachedChannel = guild.channels.cache.get(cachedChannelId) || 
                            await guild.channels.fetch(cachedChannelId).catch(() => null);
        
        if (cachedChannel) {
          logger.log(`‚úÖ Salon trouv√© dans le cache: #${cachedChannel.name} (${cachedChannel.id})`);
          // Mettre √† jour le compteur avant de retourner
          await updateMemberCount(guild);
          return { 
            success: false, 
            message: `‚ùå Un salon de statistiques existe d√©j√† : ${cachedChannel}`
          };
        } else {
          logger.log(`‚ÑπÔ∏è Le salon ${cachedChannelId} du cache n'existe plus, nettoyage...`);
          statsChannels.delete(guild.id);
          // Nettoyer aussi la base de donn√©es
          await GuildSettings.updateOne(
            { guildId: guild.id },
            { $unset: { statsChannelId: 1 } }
          );
        }
      } catch (error) {
        logger.error('‚ùå Erreur lors de la v√©rification du salon en cache:', error);
        statsChannels.delete(guild.id);
      }
    }

    // V√©rifier dans la base de donn√©es
    logger.log('\nüîç V√©rification dans la base de donn√©es...');
    const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
    
    if (guildSettings?.statsChannelId) {
      try {
        const dbChannel = guild.channels.cache.get(guildSettings.statsChannelId) || 
                         await guild.channels.fetch(guildSettings.statsChannelId).catch(() => null);
        
        if (dbChannel) {
          logger.log(`‚úÖ Salon trouv√© dans la base de donn√©es: #${dbChannel.name} (${dbChannel.id})`);
          // Mettre √† jour le cache
          statsChannels.set(guild.id, dbChannel.id);
          // Mettre √† jour le compteur avant de retourner
          await updateMemberCount(guild);
          return { 
            success: false, 
            message: `‚ùå Un salon de statistiques existe d√©j√† : ${dbChannel}`
          };
        } else {
          logger.log(`‚ÑπÔ∏è Le salon ${guildSettings.statsChannelId} de la base de donn√©es n'existe plus, nettoyage...`);
          // Nettoyer la base de donn√©es
          await GuildSettings.updateOne(
            { guildId: guild.id },
            { $unset: { statsChannelId: 1 } }
          );
        }
      } catch (error) {
        logger.error('‚ùå Erreur lors de la v√©rification du salon en base de donn√©es:', error);
      }
    }

    // V√©rifier s'il existe d√©j√† un salon de statistiques dans les salons existants
    logger.log('\nüîç V√©rification des salons vocaux existants...');
    
    // R√©cup√©rer TOUS les salons vocaux, pas seulement ceux en cache
    const allVoiceChannels = await guild.channels.fetch().then(channels => 
      channels.filter(c => c.type === ChannelType.GuildVoice)
    );
    
    // V√©rifier s'il y a d√©j√† un salon de statistiques
    const existingVoiceChannels = allVoiceChannels.filter(
      c => c.name.startsWith('üë• Membres:') || c.name.startsWith('Membres:')
    );

    if (existingVoiceChannels.size > 0) {
      const existingChannel = existingVoiceChannels.first();
      logger.log(`‚ö†Ô∏è Salon de statistiques existant trouv√©: #${existingChannel.name} (${existingChannel.id})`);
      
      // Mettre √† jour la base de donn√©es et le cache
      await GuildSettings.findOneAndUpdate(
        { guildId: guild.id },
        { $set: { statsChannelId: existingChannel.id } },
        { upsert: true }
      );
      statsChannels.set(guild.id, existingChannel.id);
      
      // Mettre √† jour le compteur
      await updateMemberCount(guild);
      
      return { 
        success: false, 
        message: `‚ö†Ô∏è Un salon de statistiques existant a √©t√© trouv√© et r√©cup√©r√© : ${existingChannel}`
      };
    }

    // 3. Cr√©er le salon vocal
    logger.log('\nüîÑ Cr√©ation du salon de statistiques...');
    try {
      const channel = await guild.channels.create({
        name: channelName,
        type: ChannelType.GuildVoice,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id,
            deny: [PermissionFlagsBits.Connect],
          },
        ],
        reason: 'Cr√©ation du salon de statistiques des membres',
      });

      logger.log(`‚úÖ Salon cr√©√© avec succ√®s: #${channel.name} (${channel.id})`);

      // 4. Mettre √† jour la base de donn√©es
      logger.log('\nüíæ Mise √† jour de la base de donn√©es...');
      await GuildSettings.findOneAndUpdate(
        { guildId: guild.id },
        { $set: { statsChannelId: channel.id } },
        { upsert: true }
      );
      logger.log(`‚úÖ Base de donn√©es mise √† jour pour le serveur: ${guild.id}`);

      // 5. Mettre √† jour le cache
      statsChannels.set(guild.id, channel.id);
      logger.log(`‚úÖ Cache mis √† jour pour le serveur: ${guild.id}`);

      // 6. Mettre √† jour imm√©diatement le compteur
      logger.log('\nüîÑ Mise √† jour initiale du compteur...');
      await updateMemberCount(guild);

      return { 
        success: true, 
        message: `‚úÖ Salon de statistiques cr√©√© avec succ√®s : ${channel}`,
        channel 
      };
    } catch (error) {
      logger.error('‚ùå Erreur lors de la cr√©ation du salon:', error);
      // Nettoyer en cas d'√©chec
      statsChannels.delete(guild.id);
      throw error;
    }
  } catch (error) {
    logger.error('‚ùå Erreur lors de la cr√©ation du salon de statistiques:', error);
    return { 
      success: false, 
      message: 'Une erreur est survenue lors de la cr√©ation du salon de statistiques.'
    };
  }
};

// Supprimer le salon de statistiques
exports.deleteStatsChannel = async function(guild) {
  try {
    console.log(`üîç Tentative de suppression du salon de statistiques pour le serveur: ${guild.name} (${guild.id})`);
    
    // V√©rifier si un salon existe dans le cache
    const channelId = statsChannels.get(guild.id);
    if (!channelId) {
      console.log('‚ÑπÔ∏è Aucun salon de statistiques trouv√© dans le cache pour ce serveur');
      
      // V√©rifier dans GuildSettings au cas o√π
      const guildSettings = await GuildSettings.findOne({ guildId: guild.id });
      if (!guildSettings?.statsChannelId) {
        return { 
          success: false, 
          message: 'Aucun salon de statistiques trouv√© pour ce serveur.' 
        };
      }
      
      // Mettre √† jour le cache avec la valeur de GuildSettings
      statsChannels.set(guild.id, guildSettings.statsChannelId);
    }

    // Supprimer le salon s'il existe
    const channel = guild.channels.cache.get(channelId);
    if (channel) {
      try {
        await channel.delete('Suppression du salon de statistiques');
        console.log(`‚úÖ Salon de statistiques supprim√©: ${channel.name} (${channel.id})`);
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression du salon:', error);
        if (error.code === 50013) {
          return { 
            success: false, 
            message: 'Je n\'ai pas la permission de supprimer ce salon.' 
          };
        }
        throw error;
      }
    }

    // Mettre √† jour GuildSettings
    await GuildSettings.updateOne(
      { guildId: guild.id },
      { $set: { statsChannelId: null } }
    );
    
    // Supprimer du cache
    statsChannels.delete(guild.id);

    return { 
      success: true, 
      message: 'Le salon de statistiques a √©t√© supprim√© avec succ√®s.' 
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du salon de statistiques:', error);
    return { 
      success: false, 
      message: 'Une erreur est survenue lors de la suppression du salon de statistiques.'
    };
  }
};
